#!/usr/bin/env python3
"""
🎯 SIMPLE PAPER TRADING DEMONSTRATION
============================================================
Simplified demonstration of paper trading functionality
Shows how trades are logged without execution
"""

import sys
import os
sys.path.append('/workspaces/Intradar-bot')

from src.paper_trading.paper_trader import PaperTradingEngine, PaperTrade
from datetime import datetime
import json


def demonstrate_paper_trading_engine():
    """
    🎯 Simple demonstration of paper trading engine
    Shows trade logging without actual execution
    """
    
    print("🎯 PAPER TRADING ENGINE DEMONSTRATION")
    print("=" * 60)
    print("📝 This shows how trades are logged without execution")
    print("🔒 Perfect for strategy validation before live trading")
    print("=" * 60)
    
    # Initialize paper trading engine
    engine = PaperTradingEngine(
        initial_capital=100000.0,
        log_directory="/workspaces/Intradar-bot/data/demo_logs"
    )
    
    print(f"\n📊 SIMULATING TRADING DECISIONS...")
    print(f"💡 In real trading, these would be generated by your strategy")
    
    # Simulate some trade signals that your strategy would generate
    trade_signals = [
        {
            'action': 'BUY',
            'symbol': 'RELIANCE.NS',
            'price': 2450.50,
            'quantity': 20,  # ₹49,010 position
            'strategy_signal': 'BREAKOUT_LONG: Price broke resistance at ₹2445',
            'confidence': 85.0
        },
        {
            'action': 'BUY', 
            'symbol': 'TCS.NS',
            'price': 3580.25,
            'quantity': 14,  # ₹50,123 position
            'strategy_signal': 'MA_CROSSOVER: Fast MA crossed above slow MA',
            'confidence': 78.0
        },
        {
            'action': 'SELL',
            'symbol': 'HDFCBANK.NS', 
            'price': 1675.80,
            'quantity': 30,  # ₹50,274 position
            'strategy_signal': 'BREAKDOWN_SHORT: Volume spike on support break',
            'confidence': 72.0
        }
    ]
    
    executed_trades = []
    
    # Execute paper trades
    for i, signal in enumerate(trade_signals, 1):
        print(f"\n📝 PAPER TRADE {i}:")
        print(f"   🎯 Signal: {signal['strategy_signal']}")
        print(f"   📊 {signal['action']} {signal['quantity']} {signal['symbol']} @ ₹{signal['price']:.2f}")
        
        # Execute paper trade
        trade_id = engine.execute_paper_trade(signal)
        executed_trades.append(trade_id)
        
        # Show capital after trade
        print(f"   💰 Available Capital: ₹{engine.current_capital:,.2f}")
        
    # Simulate some time passing and then close trades
    print(f"\n⏰ SIMULATING TIME PASSAGE...")
    print(f"💡 In live trading, exits would be triggered by strategy conditions")
    
    # Simulate exit conditions
    exit_scenarios = [
        {'trade_id': executed_trades[0], 'exit_price': 2465.75, 'reason': 'TAKE_PROFIT'},
        {'trade_id': executed_trades[1], 'exit_price': 3570.90, 'reason': 'STOP_LOSS'},
        {'trade_id': executed_trades[2], 'exit_price': 1665.40, 'reason': 'TAKE_PROFIT'}
    ]
    
    # Close the paper trades
    total_pnl = 0
    for i, exit_info in enumerate(exit_scenarios, 1):
        print(f"\n🚪 PAPER EXIT {i}:")
        pnl = engine.close_paper_trade(
            exit_info['trade_id'], 
            exit_info['exit_price'], 
            exit_info['reason']
        )
        total_pnl += pnl
        
    # Show final summary
    print(f"\n" + "="*60)
    print(f"📊 DEMONSTRATION SUMMARY")
    print(f"="*60)
    
    summary = engine.get_performance_summary()
    
    print(f"\n💰 CAPITAL PERFORMANCE:")
    print(f"   Initial Capital:    ₹{summary['capital_analysis']['initial_capital']:,.2f}")
    print(f"   Final Capital:      ₹{summary['capital_analysis']['current_capital']:,.2f}")
    print(f"   Total P&L:          ₹{summary['capital_analysis']['total_pnl']:+,.2f}")
    print(f"   Return:             {summary['capital_analysis']['total_return_pct']:+.2f}%")
    
    print(f"\n📈 TRADING STATISTICS:")
    print(f"   Total Trades:       {summary['trading_stats']['total_trades']}")
    print(f"   Winning Trades:     {summary['trading_stats']['winning_trades']}")
    print(f"   Losing Trades:      {summary['trading_stats']['losing_trades']}")
    print(f"   Win Rate:           {summary['trading_stats']['win_rate_pct']:.1f}%")
    print(f"   Avg Trade P&L:      ₹{summary['trading_stats']['avg_trade_pnl']:+,.2f}")
    
    print(f"\n🎯 SYMBOLS & SECTORS:")
    print(f"   Symbols Traded:     {', '.join(summary['market_coverage']['symbols_traded'])}")
    print(f"   Sectors Covered:    {', '.join(summary['market_coverage']['sectors_traded'])}")
    
    # Save and show log files
    engine.save_performance_summary()
    
    # Show generated log files
    log_dir = "/workspaces/Intradar-bot/data/demo_logs"
    if os.path.exists(log_dir):
        log_files = os.listdir(log_dir)
        if log_files:
            print(f"\n📁 GENERATED LOG FILES:")
            for log_file in sorted(log_files):
                file_path = os.path.join(log_dir, log_file)
                file_size = os.path.getsize(file_path)
                print(f"   📄 {log_file} ({file_size} bytes)")
                
                # Show preview of JSON log
                if log_file.endswith('.json') and 'paper_trades_' in log_file:
                    try:
                        with open(file_path, 'r') as f:
                            trade_data = json.load(f)
                        print(f"       Contains {len(trade_data)} trade records")
                    except:
                        pass
    
    # Explain how this works in real trading
    print(f"\n" + "="*60)
    print(f"💡 HOW THIS WORKS IN REAL TRADING")
    print(f"="*60)
    
    print(f"\n🎯 IN YOUR STRATEGY CODE:")
    print(f"   1. Your strategy analyzes market conditions")
    print(f"   2. When conditions are met, it calls paper_engine.execute_paper_trade()")
    print(f"   3. Trade is LOGGED but NOT sent to broker")
    print(f"   4. You can see exactly what would have been traded")
    
    print(f"\n📊 FOR VALIDATION:")
    print(f"   ✅ Test strategy logic without risk")
    print(f"   ✅ Verify entry and exit conditions")
    print(f"   ✅ Check position sizing")
    print(f"   ✅ Validate risk management")
    print(f"   ✅ Measure performance metrics")
    
    print(f"\n🚀 WHEN READY FOR LIVE TRADING:")
    print(f"   1. Replace paper_engine calls with broker API calls")
    print(f"   2. Start with small position sizes")
    print(f"   3. Monitor closely for differences from paper trading")
    print(f"   4. Scale up gradually as confidence builds")
    
    print(f"\n✅ DEMONSTRATION COMPLETE!")
    print(f"📁 Check the log files to see all trade details")
    
    return summary


def show_log_file_contents():
    """Show the contents of generated log files"""
    
    log_dir = "/workspaces/Intradar-bot/data/demo_logs"
    
    print(f"\n📄 LOG FILE CONTENTS:")
    print(f"="*60)
    
    try:
        log_files = [f for f in os.listdir(log_dir) if f.endswith('.json')]
        
        if log_files:
            latest_log = sorted(log_files)[-1]
            log_path = os.path.join(log_dir, latest_log)
            
            print(f"📄 {latest_log}:")
            
            with open(log_path, 'r') as f:
                trade_data = json.load(f)
                
            for i, trade in enumerate(trade_data, 1):
                print(f"\n🔸 TRADE {i}:")
                print(f"   ID: {trade['trade_id']}")
                print(f"   Symbol: {trade['symbol']}")
                print(f"   Action: {trade['action']}")
                print(f"   Entry: ₹{trade['entry_price']:.2f}")
                print(f"   Exit: ₹{trade['exit_price']:.2f}")
                print(f"   Quantity: {trade['quantity']}")
                print(f"   P&L: ₹{trade['pnl']:+.2f}")
                print(f"   Status: {trade['status']}")
                print(f"   Signal: {trade['strategy_signal']}")
                
        else:
            print("❌ No log files found")
            
    except Exception as e:
        print(f"❌ Error reading log files: {e}")


if __name__ == "__main__":
    print("🎯 STARTING PAPER TRADING DEMONSTRATION...")
    
    # Run the demonstration
    summary = demonstrate_paper_trading_engine()
    
    # Show log contents
    show_log_file_contents()
    
    print(f"\n🎯 PAPER TRADING SYSTEM READY!")
    print(f"📝 Use this system to validate your strategy before live trading")
