"""
Yahoo Finance Data Provider
Provides historical and real-time stock market data using yfinance.
"""

import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta


class YFinanceProvider:
    """Yahoo Finance data provider for stock market data"""
    
    def __init__(self):
        self.name = "YFinance"
    
    def get_data(self, symbol, period='1y', interval='1d'):
        """
        Get historical data for a symbol
        
        Args:
            symbol (str): Stock symbol (e.g., 'AAPL')
            period (str): Time period ('1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max')
            interval (str): Data interval ('1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1wk', '1mo', '3mo')
        
        Returns:
            pandas.DataFrame: OHLCV data with standard column names
        """
        try:
            print(f"üìä Fetching data for {symbol}...")
            
            ticker = yf.Ticker(symbol)
            data = ticker.history(period=period, interval=interval)
            
            if data.empty:
                print(f"‚ùå No data found for symbol: {symbol}")
                return None
            
            # Clean up the data
            data = data.dropna()
            
            # Ensure we have the required columns
            required_columns = ['Open', 'High', 'Low', 'Close', 'Volume']
            if not all(col in data.columns for col in required_columns):
                print(f"‚ùå Missing required columns for {symbol}")
                return None
            
            print(f"‚úÖ Successfully fetched {len(data)} bars for {symbol}")
            return data
            
        except Exception as e:
            print(f"‚ùå Error fetching data for {symbol}: {e}")
            return None
    
    def get_real_time_price(self, symbol):
        """Get current price for a symbol"""
        try:
            ticker = yf.Ticker(symbol)
            data = ticker.history(period='1d', interval='1m')
            if not data.empty:
                return data['Close'].iloc[-1]
            return None
        except Exception as e:
            print(f"‚ùå Error fetching real-time price for {symbol}: {e}")
            return None
    
    def get_multiple_symbols(self, symbols, period='1y', interval='1d'):
        """Get data for multiple symbols"""
        results = {}
        for symbol in symbols:
            data = self.get_data(symbol, period, interval)
            if data is not None:
                results[symbol] = data
        return results
